{"version":3,"sources":["components/AddForm.jsx","components/Habit.jsx","components/Habits.jsx","components/Navbar.jsx","app.jsx","index.js"],"names":["AddForm","memo","props","formRef","React","createRef","inputRef","ref","onSubmit","e","preventDefault","name","current","value","onAdd","reset","type","Habit","handleIncrement","onIncrement","habit","handleDecrement","onDecrement","handleDelete","onDelete","this","count","className","onClick","PureComponent","Habits","handleAdd","shortid","require","habits","map","key","generate","onReset","Component","Navbar","totalCount","App","state","id","item","setState","filter","Date","now","handleReset","length","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5e4f8baf.chunk.js","sourcesContent":["// React.PureComponent는shouldComponentUpdate()안에 얕은비교가 적용된 버전이다.\r\n// 얕은 비교?\r\n// - 변수와 문자열에서는 값을 비교한다. \r\n// - 객체에서는 reference 값을 비교한다.\r\n// 즉, 현재 state, props를 다음에 받을 state, props와 얕은 비교를 해준다. 비교값이 참일 경우 즉, 현재와 다음의 state, props가 같은 경우에는 false를 반환하여 re-render를 진행하지 않고, 반대의 경우 true를 반환하여 re-render\r\n\r\n// class에서는 PureComponent\r\n// 함수형은 memo\r\n\r\nimport React, { memo } from 'react';\r\n\r\nconst AddForm = memo((props) => {\r\n    const formRef = React.createRef();\r\n    const inputRef = React.createRef();\r\n\r\n    const onSubmit=(e)=>{\r\n        e.preventDefault();\r\n        const name= inputRef.current.value;\r\n        name && props.onAdd(name);\r\n        formRef.current.reset();   \r\n    }\r\n    return (\r\n        <form ref={formRef} onSubmit={onSubmit}>\r\n            <input ref={inputRef} type='text'/>\r\n           <button type='submit'>Add</button>\r\n        </form>\r\n    );         \r\n});\r\n\r\nexport default AddForm;","import React, { PureComponent } from 'react';\n\nclass Habit extends PureComponent {\n  handleIncrement = () => {\n    this.props.onIncrement(this.props.habit);\n  };\n\n  handleDecrement = () => {\n    this.props.onDecrement(this.props.habit);\n  };\n\n  handleDelete = () => {\n    this.props.onDelete(this.props.habit);\n  };\n\n  render() {\n    const { name, count } = this.props.habit;\n    return (\n      <li className=\"habit\">\n        <span className=\"habit-name\">{name}</span>\n        <span className=\"habit-count\">{count}</span>\n        <button\n          className=\"habit-button habit-increase\"\n          onClick={this.handleIncrement}\n        >\n          <i className=\"fas fa-plus-square\"></i>\n        </button>\n        <button\n          className=\"habit-button habit-decrease\"\n          onClick={this.handleDecrement}\n        >\n          <i className=\"fas fa-minus-square\"></i>\n        </button>\n        <button\n          className=\"habit-button habit-delete\"\n          onClick={this.handleDelete}\n        >\n          <i className=\"fas fa-trash\"></i>\n        </button>\n      </li>\n    );\n  }\n}\n\nexport default Habit;\n","import React, { Component } from 'react';\nimport AddForm from './AddForm';\nimport Habit from './Habit';\n\nclass Habits extends Component {\n\n  handleAdd=(name)=>{\n    this.props.onAdd(name);\n  }\n\n  render() {\n    const shortid = require('shortid');\n\n    return (\n      <div>\n        <AddForm onAdd={this.handleAdd}/>\n        <div className=\"habits\">\n          <ul>\n            {this.props.habits.map(habit => (\n              <Habit\n                key={shortid.generate()}\n                habit={habit}\n                onIncrement={this.props.onIncrement}\n                onDecrement={this.props.onDecrement}\n                onDelete={this.props.onDelete}\n              />\n            ))}\n          </ul>\n        </div>\n        <button onClick={this.props.onReset}>Reset Count</button>\n      </div>\n    );\n  }\n}\n\nexport default Habits;\n","import React, { Component } from 'react';\n\nclass Navbar extends Component {\n  render() {\n    return (\n      <div className=\"navbar\">\n        <i className=\"navbar-logo fas fa-leaf\"></i>\n        <span>Habit Tracker</span>\n        <span className=\"navbar-count\">{this.props.totalCount}</span>\n      </div>\n    );\n  }\n}\n\nexport default Navbar;\n","import React, { Component } from 'react';\nimport './App.css';\nimport Habits from './components/Habits';\nimport Navbar from './components/Navbar';\n\nclass App extends Component {\n  state = {\n    habits: [\n      { id: 1, name: 'Reading', count: 0 },\n      { id: 2, name: 'Running', count: 0 },\n      { id: 3, name: 'Coding', count: 0 },\n    ],\n  };\n\n  handleIncrement = habit => {\n    // habits 오브젝트의 count만 업데이트하면, habit 컴포넌트에서 PureComponent사용할 경우 얕은 비교를 하기 때문에 object전체가 바뀌지 않으면 habit은 리렌더링 되지 않는다.\n    // const habits = [...this.state.habits];\n    // const index = habits.indexOf(habit);\n    // habits[index].count++;\n    // 따라서 habits를 아예 다른 object로 바꿔줘야 PureComponent인 habit에서 렌더링 일어난다.\n    const habits = this.state.habits.map(item=>{\n      if(item.id===habit.id){\n        // habit.id가 우리가 업데이트 해야 할 id\n         return {...habit, count:habit.count+1} // habit 오브젝트 복사하고, habits의 count만 새 값으로 덮어씀\n      }\n      return item;\n    })\n    this.setState({ habits });\n\n  };\n\n  handleDecrement = habit => {\n    // const habits = [...this.state.habits];\n    // const index = habits.indexOf(habit);\n    // const count = habits[index].count - 1;\n    // habits[index].count = count < 0 ? 0 : count;\n    const habits = this.state.habits.map(item=>{\n      if(item.id===habit.id){\n        const count = habit.count - 1;\n        return {...habit, count: count < 0 ? 0 : count}\n      }\n      return item;\n    })\n    this.setState({ habits });\n  };\n\n  handleDelete = habit => {\n    const habits = this.state.habits.filter(item => item.id !== habit.id);\n    this.setState({ habits });\n  };\n\n  handleAdd = name => {\n    const habits = [...this.state.habits, { id: Date.now(), name, count: 0 }];\n    this.setState({ habits });\n  };\n\n  handleReset = () => {\n    const habits = this.state.habits.map(habit => {\n      // habit.count = 0;\n      // return {habit};\n      if(habit.count!==0){\n        // count가 이미 0인 habit은 렌더링 되지 않게\n        return {...habit, count:0};\n      }\n      return habit;\n    });\n    this.setState({ habits });\n  };\n\n  render() {\n    return (\n      <>\n        <Navbar\n          totalCount={this.state.habits.filter(item => item.count > 0).length}\n        />\n        <Habits\n          habits={this.state.habits}\n          onIncrement={this.handleIncrement}\n          onDecrement={this.handleDecrement}\n          onDelete={this.handleDelete}\n          onAdd={this.handleAdd}\n          onReset={this.handleReset}\n        />\n      </>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './app';\nimport '@fortawesome/fontawesome-free/js/all.js';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}